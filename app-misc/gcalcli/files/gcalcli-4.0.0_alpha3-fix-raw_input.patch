diff --git a/gcalcli b/gcalcli
index 0ea6f8d..f391a1b 100755
--- a/gcalcli
+++ b/gcalcli
@@ -192,7 +192,7 @@ try:
     from dateutil.parser import parse
     import httplib2
     import six
-    from six.moves import range, zip, map, cPickle as pickle
+    from six.moves import range, zip, map, cPickle as pickle, input as safe_input
     from apiclient.discovery import build
     from apiclient.errors import HttpError
     from oauth2client.file import Storage
@@ -1345,7 +1345,7 @@ class gcalcli:
             return
 
         PrintMsg(CLR_MAG(), "Delete? [N]o [y]es [q]uit: ")
-        val = raw_input()
+        val = safe_input()
 
         if not val or val.lower() == 'n':
             return
@@ -1375,7 +1375,7 @@ class gcalcli:
                                 "[t]itle [l]ocation " +
                                 "[w]hen len[g]th " +
                                 "[r]eminder [d]escr: ")
-            val = raw_input()
+            val = safe_input()
 
             if not val or val.lower() == 'n':
                 return
@@ -1403,21 +1403,21 @@ class gcalcli:
 
             elif val.lower() == 't':
                 PrintMsg(CLR_MAG(), "Title: ")
-                val = raw_input()
+                val = safe_input()
                 if val.strip():
                     event['summary'] = \
                         _u(val.strip())
 
             elif val.lower() == 'l':
                 PrintMsg(CLR_MAG(), "Location: ")
-                val = raw_input()
+                val = safe_input()
                 if val.strip():
                     event['location'] = \
                         _u(val.strip())
 
             elif val.lower() == 'w':
                 PrintMsg(CLR_MAG(), "When: ")
-                val = raw_input()
+                val = safe_input()
                 if val.strip():
                     td = (event['e'] - event['s'])
                     length = ((td.days * 1440) + (td.seconds / 60))
@@ -1443,7 +1443,7 @@ class gcalcli:
 
             elif val.lower() == 'g':
                 PrintMsg(CLR_MAG(), "Length (mins): ")
-                val = raw_input()
+                val = safe_input()
                 if val.strip():
                     newStart, newEnd = \
                         GetTimeFromStr(event['start']['dateTime'], val.strip())
@@ -1471,7 +1471,7 @@ class gcalcli:
                 while 1:
                     PrintMsg(CLR_MAG(),
                              "Enter a valid reminder or '.' to end: ")
-                    r = raw_input()
+                    r = safe_input()
                     if r == '.':
                         break
                     rem.append(r)
@@ -1489,7 +1489,7 @@ class gcalcli:
 
             elif val.lower() == 'd':
                 PrintMsg(CLR_MAG(), "Description: ")
-                val = raw_input()
+                val = safe_input()
                 if val.strip():
                     event['description'] = \
                         _u(val.strip())
@@ -2081,7 +2081,7 @@ class gcalcli:
                     continue
 
                 PrintMsg(CLR_MAG(), "\n[S]kip [i]mport [q]uit: ")
-                val = raw_input()
+                val = safe_input()
                 if not val or val.lower() == 's':
                     continue
                 if val.lower() == 'i':
@@ -2422,27 +2422,27 @@ def BowChickaWowWow():
         if FLAGS.prompt:
             if FLAGS.title is None:
                 PrintMsg(CLR_MAG(), "Title: ")
-                FLAGS.title = raw_input()
+                FLAGS.title = safe_input()
             if FLAGS.where is None:
                 PrintMsg(CLR_MAG(), "Location: ")
-                FLAGS.where = raw_input()
+                FLAGS.where = safe_input()
             if FLAGS.when is None:
                 PrintMsg(CLR_MAG(), "When: ")
-                FLAGS.when = raw_input()
+                FLAGS.when = safe_input()
             if FLAGS.duration is None:
                 if FLAGS.allday:
                     PrintMsg(CLR_MAG(), "Duration (days): ")
                 else:
                     PrintMsg(CLR_MAG(), "Duration (mins): ")
-                FLAGS.duration = raw_input()
+                FLAGS.duration = safe_input()
             if FLAGS.description is None:
                 PrintMsg(CLR_MAG(), "Description: ")
-                FLAGS.description = raw_input()
+                FLAGS.description = safe_input()
             if not FLAGS.reminder:
                 while 1:
                     PrintMsg(CLR_MAG(),
                              "Enter a valid reminder or '.' to end: ")
-                    r = raw_input()
+                    r = safe_input()
                     if r == '.':
                         break
                     n, m = ParseReminder(str(r))
